{
  "main": {
    "sandbox": "Sandbox Mode",
    "production": "Live Mode",
    "paperPrefix": "Paper",
    "trading": "{{paperPrefix}} Trading Terminal",
    "market": "{{paperPrefix}} Market Data",
    "strategyEditor": "Strategies",
    "startingUp": "Starting up app...",
    "craftedBy": "Crafted by Bitfinex"
  },
  "auth": {
    "enterPsw": "Enter your password to unlock",
    "password": "Password",
    "confirmPsw": "Confirm password",
    "selectMode": "Select trading mode",
    "resetMsg": "Alternatively, clear your credentials and stored data to set a new password",
    "resetBtn": "Clear Data & Reset",
    "unlockBtn": "Unlock",
    "initMsg": "Create a password to encrypt your API credentials & strategies. All data is stored locally, and your password is hashed",
    "saveCredentsBtn": "Save Credentials"
  },
  "activeAlgoOrdersModal": {
    "title": "Active Orders",
    "cancellBtn": "Cancel All",
    "resumeBtn": "Resume",
    "selectAllBtn": "Select All"
  },
  "closePositionModal": {
    "title": "Closing Position",
    "body": "Are you sure you want to close {{pair}} position?"
  },
  "launchStrategyModal": {
    "title": "Launch Strategy",
    "body": "This action will launch this strategy in LIVE mode, acting automatically on your behalf trough the Bitfinex API and using real funds from your Exchange wallet. The current active strategy will stop and this one will take its place."
  },
  "algoOrderForm": {
    "accdist": {
      "title": "Accumulate/Distribute",
      "help": "Accumulate/Distribute allows you to break up a large order into smaller randomized chunks, submitted at regular or irregular intervals to minimise detection by other players in the market.\n\nBy enabling the 'Await Fill' option, the algorithm will ensure each component fills before submitting subsequent orders.\n\nEnabling the 'Catch Up' flag will cause the algorithm to ignore the slice interval for the next order if previous orders have taken longer than expected to fill, thereby ensuring the time-to-fill for the entire order is not adversely affected. Furthermore, when 'catching up', the slice interval is hard-coded to 0.2 seconds. \n\nNote: If the remaining order amount is less than the minimum order size, it will be ignored.",
      "amountDistortion": "Amount Distortion %",
      "amountDistortionHelp": "Amount to distort individual order sizes to prevent detection, in percent",
      "sliceIntervalSec": "Slice Interval S",
      "sliceIntervalSecHelp": "Time to wait between each slice order, in seconds"
    },
    "iceberg": {
      "title": "Iceberg",
      "help": "Iceberg allows you to place a large order on the market while ensuring only a small part of it is ever filled at once.\n\nBy enabling the 'Excess As Hidden' option, it is possible to offer up the remainder as a hidden order, allowing for minimal market disruption when executing large trades."
    },
    "visibleOnHit": "Visible on hit",
    "visibleOnHitHelp": "The rest part of the hidden order will be visible after first hit (partial execution).",
    "saveParamsSettings": "Algo Params settings",
    "intervalDistortion": "Interval Distortion %",
    "intervalDistortionHelp": "Amount to distort each slice interval, in percent",
    "limitPrice": "Price",
    "limitPriceHelp": "Price for LIMIT order type",
    "offsetType": "Offset Type",
    "offsetTypeHelp": "Relative order price as offset from an indicator/book/last trade",
    "topBid": "Top Bid",
    "topAsk": "Top Ask",
    "bookMidPrice": "Book Mid Price",
    "lastTradePrice": "Last Trade Price",
    "simpleMovingAverage": "Simple Moving Average",
    "offsetDelta": "Offset Delta",
    "offsetDeltaHelp": "Price as distance from offset value",
    "smaPeriod": "SMA Period",
    "smaPeriodHelp": "Period for simple moving average indicator",
    "smaCandlePrice": "SMA Candle Price",
    "emaPeriod": "EMA Period",
    "emaPeriodHelp": "Period for exponential moving average indicator",
    "emaCandlePrice": "EMA Candle Price",
    "smaCandleTimeFrame": "SMA Candle Time Frame",
    "m": "{{number}}m",
    "h": "{{number}}h",
    "D": "{{number}}D",
    "M": "{{number}}M",
    "emaCandleTimeFrame": "EMA Candle Time Frame",
    "priceCapType": "Price Cap Type",
    "priceCapTypeHelp": "Upper price limit for relative order type",
    "none": "None",
    "capDelta": "Cap Delta",
    "capDeltaHelp": "Price as distance from cap value",
    "relative": "Relative",
    "expMovingAverage": "Exp Moving Average",
    "priceOffset": "Price Offset",
    "priceOffsetSMA": "Price Offset SMA",
    "priceOffsetEMA": "Price Offset EMA",
    "priceCap": "Price Cap",
    "priceCapSMA": "Price Cap SMA",
    "priceCapEMA": "Price Cap EMA",
    "excessAsHidden": "Excess as hidden",
    "excessAsHiddenHelp": "Create a hidden order for the non-slice amount",
    "orderType": "Order Type",
    "limit": "Limit",
    "market": "Market",
    "price": "Price",
    "amount": "Amount",
    "amountHelp": "Total order amount, to be executed slice-by-slice",
    "sliceAmount": "Slice Amount",
    "sliceAmountHelp": "Allows individual buy & sell amounts to be adjusted",
    "sliceAmountPerc": "Slice Amount as %",
    "sliceAmountPercHelp": "Takes percentage of total order amount for individual buy & sell amounts",
    "leverage": "Laverage",
    "action": "Action",
    "buy": "Buy",
    "sell": "Sell",
    "crossover": {
      "title": "MA Crossover",
      "help": "Schedules either a LIMIT or MARKET order to execute when two moving averages cross. \n\nBoth moving averages can be either exponential or smoothed, and can have differing time frames and candle keys (close, open, etc)"
    },
    "shortEmaSettings": "Short EMA Settings",
    "shortMaSettings": "Short MA Settings",
    "longEmaSettings": "Long EMA Settings",
    "longMaSettings": "Long MA Settings",
    "shortEmaMaType": "Short EMA/MA Type",
    "ema": "EMA",
    "ma": "MA",
    "longEmaMaType": "Long EMA/MA Type",
    "totalOrderAmount": "Total order amount",
    "shortMaPeriod": "Short MA Period",
    "shortMaPeriodHelp": "Period for short moving average",
    "longMaPeriod": "Long MA Period",
    "longMaPeriodHelp": "Period for long moving average",
    "shortEmaPeriod": "Short EMA Period",
    "shortEmaPeriodHelp": "Period for short exponential moving average",
    "longEmaPeriod": "Long EMA Period",
    "longEmaPeriodHelp": "Period for long exponential moving average",
    "shortMaCandlePrice": "Short MA Candle Price",
    "open": "Open",
    "low": "Low",
    "high": "High",
    "close": "Close",
    "shortEmaCandlePrice": "Short EMA Candle Price",
    "longMaCandlePrice": "Long MA Candle Price",
    "longEmaCandlePrice": "Long EMA Candle Price",
    "shortMaTimeFrame": "Short MA Time Frame",
    "longMaTimeFrame": "Long MA Time Frame",
    "shortEmaTimeFrame": "Short EMA Time Frame",
    "longEmaTimeFrame": "Long EMA Time Frame",
    "orderPrice": "Order Price",
    "ococo": {
      "title": "Order Creates OcO",
      "help": "Creates a standard LIMIT or MARKET order, and schedules an OcO order to be submitted after the initial order fills. All of the normal LIMIT/MARKET parameters are available on both orders."
    },
    "ocoSettings": "OcO Settings",
    "initialOrderAmount": "Initial Order amount",
    "ocoOrderAmount": "OcO Order amount",
    "initialOrderPrice": "Initial Order Price",
    "ocoLimitPrice": "OcO Limit Price",
    "ocoStopPrice": "OcO Stop Price",
    "hidden": "HIDDEN",
    "hiddenHelp": "This option allows you to place an order into the book but not have it displayed to other traders. Price/time priority is the same as a displayed order, but the hidden order will always pay the 'taker' fee while those trading against a hidden order will pay the 'maker' fee",
    "postOnly": "POST-ONLY",
    "postOnlyHelp": "'Post Only' limit orders are orders that allow you to be sure to always pay the maker fee. When placed, a 'Post Only' limit order is either inserted into the orderbook or cancelled and not matched with a pre-existing order",
    "catchUp": "Catch Up",
    "catchUpHelp": "If the algo falls behind in filling orders, disregard the slice interval and submit the next order after a 2 second delay",
    "awaitFill": "Await Fill",
    "awaitFillHelp": "Keeps the current order open until it fills, while tracking progress for 'Catch up'",
    "pingpong": {
      "title": "Ping/Pong",
      "help": "Ping/pong submits multiple 'ping' orders; once a ping order fills, an associated 'pong' order is submitted.\n\nMultiple ping/pong pairs can be created by specifying an order count greater than 1, a suitable min/max ping price, and a pong distance. Multiple ping orders will be created between the specified min/max prices, with the associated pongs offset by the pong distance from the ping price",
      "splitAmountHelp": "Provide seperate ping/pong amounts",
      "endlessHelp": "If true, pings will be recreated once their associated pongs fill",
      "pingPrice": "Ping Price",
      "pongPrice": "Pong Price",
      "pongDistance": "Pong Distance",
      "pingMinPrice": "Ping Min Price",
      "pingMaxPrice": "Ping Max Price",
      "pingAmount": "Ping Amount",
      "pingOrderSize": "Ping order size",
      "pongAmount": "Pong Amount",
      "pongOrderSize": "Pong order size"
    },
    "splitAmount": "SPLIT AMOUNT",
    "endless": "ENDLESS",
    "orderCount": "Order Count",
    "twap": {
      "title": "TWAP",
      "help": "TWAP spreads an order out through time in order to fill at the time-weighted average price, calculated between the time the order is submitted to the final atomic order close.\n\nThe price target may be set either by the order book, last trade price, or a custom explicit target that must be conditionally matched against another factor.\n\nWith custom price targets, the price condition may be specified to match against either the order book or last trade. If a price delta is specified, the target must be within the delta in order to match. \n\nNote: If amount distortion is provided, the total order amounts will not exceed the total amount but may be slightly less than the total amount specified.",
      "targetDeltaHelp": "± Distance from price target for match",
      "priceHelp": "Requires 'custom' price target"
    },
    "tradeBeyondEnd": "Trade Beyond End",
    "tradeBeyondEndHelp": "Continue trading beyond slice interval",
    "amountDistortionPerc": "Amount Distortion %",
    "amountDistortionPercHelp": "Amount to distort individual order sizes to prevent detection, in percent",
    "sliceIntervalSec": "Slice Interval (sec)",
    "sliceIntervalSecHelp": "Duration over which to trade slice",
    "targetDelta": "Target Delta",
    "priceTarget": "Price Target",
    "obMidPrice": "OB mid price",
    "obSidePrice": "OB side price",
    "custom": "Custom",
    "priceCondition": "Price Condition",
    "priceConditionHelp": "Match point for custom price targets",
    "matchObMidPrice": "Match OB mid price",
    "matchObSidePrice": "Match OB side",
    "matchLastTrade": "Match last trade price",
    "validationMessages": {
      "invalidOrderType": "Invalid order type: {{orderType}}",
      "invalidAmount": "Invalid amount",
      "invalidSliceAmount": "Invalid slice amount",
      "boolCatchUpFlagRequired": "Bool catch up flag required",
      "boolAwaitFillFlagRequired": "Bool await fill flag required",
      "invalidSliceInterval": "Invalid slice interval",
      "invalidIntervalDistortion": "Invalid interval distortion",
      "invalidAmountDistortion": "Invalid amount distortion",
      "amountSliceAmountMustHaveSameSign": "Amount & slice amount must have same sign",
      "sliceAmountCannotBeGreaterThanAmount": "Slice amount cannot be greater than amount",
      "limitPriceRequiredForLimitOrderType": "Limit price required for LIMIT order type",
      "postOnlyFlagRequiredForLimitOrderType": "Post only flag required for LIMIT order type",
      "invalidRelativeCapDelta": "Invalid relative cap delta",
      "periodRequiredForRelativeCapIndicator": "{{capitalizedType}} period required for relative cap indicator",
      "invalidRelativeCapIndicatorPeriod": "Invalid relative cap indicator period: {{value}}",
      "invalidRelativeCapIndicatorPeriodPleaseSetAPositiveValue": "Invalid relative cap indicator period, please set a positive value",
      "candlePriceRequiredForRelativeCapIndicator": "Candle price required for relative cap indicator",
      "candleTimeFrameRequiredForRelativeCapIndicator": "Candle time frame required for relative cap indicator",
      "unrecognizedRelativeCapCandleTimeFrame": "Unrecognized relative cap candle time frame: {{value}}",
      "invalidRelativeOffsetDelta": "Invalid relative offset delta",
      "periodRequiredForRelativeOffsetIndicator": "{{capitalizedType}} period required for relative offset indicator",
      "invalidRelativeOffsetIndicatorPeriod": "Invalid relative offset indicator period: {{value}}",
      "invalidRelativeOffsetIndicatorPeriodPleaseSetAPositiveValue": "Invalid relative offset indicator period, please set a positive value",
      "candlePriceRequiredForRelativeOffsetIndicator": "Candle price required for relative offset indicator",
      "candleTimeFrameRequiredForRelativeOffsetIndicator": "Candle time frame required for relative offset indicator",
      "unrecognizedRelativeOffsetCandleTimeFrame": "Unrecognized relative offset candle time frame: {{value}}",
      "amountCannotBeLessThan": "Amount cannot be less than {{minSize}}",
      "sliceAmountCannotBeLessThan": "Slice amount cannot be less than {{minSize}}",
      "amountCannotBeGreaterThan": "Amount cannot be greater than {{maxSize}}",
      "sliceAmountCannotBeGreaterThan": "Slice amount cannot be greater than {{maxSize}}",
      "invalidLeverage": "Invalid leverage",
      "leverageCannotBeLessThan": "Leverage cannot be less than {{minLev}}",
      "leverageCannotBeGreaterThan": "Leverage cannot be greater than {{maxLev}}",
      "invalidPrice": "Invalid price",
      "Amount & sliceAmountMustHaveSameSign": "Amount & slice amount must have same sign",
      "invalidLongIndicatorType": "Invalid long indicator type",
      "invalidArgsForLongMaIndicator": "Invalid args for long ma indicator",
      "invalidLongIndicatorPeriod": "Invalid long indicator period: {{value}}",
      "invalidLongPeriodPleaseSetAPositiveValue": "Invalid long period, please set a positive value",
      "candlePriceRequiredForLongIndicator": "Candle price required for long indicator",
      "candleTimeFrameRequiredForLongIndicator": "Candle time frame required for long indicator",
      "invalidShortIndicatorType": "Invalid short indicator type",
      "invalidArgsForShortMaIndicator": "Invalid args for short ma indicator",
      "invalidShortIndicatorPeriod": "Invalid short indicator period: {{value}}",
      "invalidShortPeriodPleaseSetAPositiveValue": "Invalid short period, please set a positive value",
      "candlePriceRequiredForShortIndicator": "Candle price required for short indicator",
      "candleTimeFrameRequiredForShortIndicator": "Candle time frame required for short indicator",
      "invalidOcoLimitPrice": "Invalid OCO limit price",
      "invalidOcoStopPrice": "Invalid OCO stop price",
      "invalidOcoAmount": "Invalid OCO amount",
      "invalidAction": "Invalid action: {{action}}",
      "invalidOcoAction": "Invalid OCO action: {{ocoAction}}",
      "invalidOrderCount": "Invalid order count: {{orderCount}}",
      "invalidPingAmount": "Invalid ping amount",
      "invalidPongAmount": "Invalid pong amount",
      "invalidPingPrice": "Invalid ping price",
      "invalidPongPrice": "Invalid pong price",
      "pongPriceMustBeGreaterThanPingForBuyOrders": "Pong price must be greater than ping price for buy orders",
      "pongPriceMustBeLessThanPingForSellOrders": "Pong price must be less than ping price for sell orders",
      "invalidPingMinPrice": "Invalid ping min price: {{pingMinPrice}}",
      "invalidPingMaxPrice": "Invalid ping max price: {{pingMaxPrice}}",
      "invalidPongDistance": "Invalid pong distance: {{pongDistance}}",
      "pingMaxPriceGreaterThanMinPrice": "Ping max price must be greater than min price",
      "pongDistancePositive": "Pong distance must be positive",
      "pingAmountCannotBeLessThan": "Ping amount cannot be less than {{minSize}}",
      "pongAmountCannotBeLessThan": "Pong amount cannot be less than {{minSize}}",
      "pingAmountCannotBeGreaterThan": "Ping amount cannot be greater than {{maxSize}}",
      "pongAmountCannotBeGreaterThan": "Pong amount cannot be greater than {{maxSize}}",
      "sliceAmountCannotBeGreaterThanTotalAmount": "Slice amount cannot be greater than total amount",
      "invalidPriceTarget": "Invalid price target",
      "negativeCustomPriceTarget": "Negative custom price target",
      "invalidConditionForCustomPriceTarget": "Invalid condition for custom price target",
      "invalidMatchedPriceTarget": "Invalid matched price target",
      "invalidPriceDeltaProvided": "Invalid price delta provided",
      "orderCountExceedsTotalMaxLimit": "limit: placed count exceeded ({{count}}/{{limit}})",
      "orderCountExceedsPairMaxLimit": "limit: placed count exceeded ({{count}}/{{limit}} for {{pair}})"
    }
  },
  "AOPauseModal": {
    "title": "Algo Orders Pause",
    "text1": "Closing the application while algo orders are active will require you to resume/cancel the algo orders when you relaunch the HoneyFramework application.",
    "text2": "When you restart the HoneyFramework application, you will be prompted to select between the currently active algo orders to which two of the given options can be applied:",
    "text3": "1. Resume: The atomic orders placed by the selected algo orders (if active) will be cancelled, and the algo orders will resume placing orders for the remaining amounts. The unselected algo orders will not be resumed and will be lost in perpetuity.",
    "text4": "2. Cancel All: All atomic orders placed by the algo orders (if active) will be cancelled and no algo orders will be resumed.",
    "text5": "Note: Atomic orders will remain active if DMS option is disabled."
  },
  "AOTableModal": {
    "title": "Algo. Orders",
    "titleFull": "Algorithmic Orders",
    "noOrders": "No active algorithmic orders"
  },
  "appSettings": {
    "title": "Settings",
    "generalTab": "General",
    "tradingModeTab": "Trading Mode",
    "appearanceTab": "Appearance",
    "language": "Language",
    "aboutTab": "About",
    "appVersion": "Version {{version}}",
    "description": "Official free algorithmic trading app based on the <url>Bitfinex API</url>, created by the Bitfinex team.",
    "licence": "This software is licenced under the <url>Apache-2.0</url> Licence.",
    "sourceCode": "The source code is available on <url>Github</url>.",
    "moreInfo": "Visit the HoneyFramework <url>FAQ page</url> for more information.",
    "apiKeys": "API keys",
    "noApiKeys": "Don't have API keys?",
    "noBfxAccount": "Don't have a Bitfinex account?",
    "noApiKeysPaper": "Don't have Paper Trading keys?",
    "noBfxAccountPaper": "Don't have a Paper Trading account?",
    "learnMoreHere": "Learn more here",
    "createASubAcc": "Create a Sub-Account here",
    "createAPI": "Create them here",
    "clickToSignup": "Click here to sign up",
    "productionKey": "Live API Key",
    "paperKey": "Paper Account API Key",
    "apiNotValid": "Invalid API Key entered",
    "apiNotConfigured": "Not Configured",
    "apiConnecting": "Please wait while connecting to the API server...",
    "apiConnectingTitle": "CONNECTING",
    "apiSubmit": "Submit",
    "autologin": "Auto-login in development mode",
    "apiKey": "API Key",
    "apiSecret": "API Secret",
    "deadManCheckbox": "Dead Man Switch",
    "themeSetting": "Application theme",
    "deadManText1": "Enabling the Dead Man switch will automatically cancel all active orders when the application closes.",
    "deadManText2": "Algorithmic orders are cancelled on application close; without the Dead Man switch, any atomic orders created by an AO will remain open, and state may be lost when the application is started up again.",
    "deadManWarning": "Disabling this should be done with caution!",
    "usageReportingCheckbox": "Usage reporting",
    "showPauseInfoCheckbox": "Show Algo Orders pause info",
    "showPauseInfoText": "If checked, the modal with explanations will be displayed when you close the app with active Algo Orders.",
    "rebootCheckbox": "Reboot automatically on bad connection",
    "rebootText": " When you experience a poor internet connection, the modal window that notifies you of this will not be displayed and the app will restart automatically.",
    "howToCreate": "How to create an API Key in Bitfinex?",
    "howToCreateDesc": "This is required to operate in the Live Environment",
    "howToCreatePaper": "How to create a Paper Sub-Account?",
    "howToCreatePaperDesc": "This is required to operate with Paper Markets using your paper balance",
    "validating": "Validating...",
    "configured": "Configured",
    "productionTradingCheckbox": "Live Mode",
    "productionTradingText": "Live trading with real money.",
    "paperTradingText": "Practice trading without risking real money.",
    "Dark": "Dark theme",
    "Light": "Light theme",
    "termsConditions": "Terms and Conditions",
    "privacyPolicy": "Privacy Policy",
    "betaDesclaimer": "Features included in 'beta release' mode are still in development, may have bugs or errors, may be incomplete, may materially change prior to a stable release, or may never be considered stable at all. Users of 'beta release' mode use this mode at their own risk. In no event shall Bitfinex be liable for any damages whatsover (including, without limitation, damages for loss of profit, business interruption, loss of information or otherwise) arising out of the use of, or inability to use, 'beta release' mode, even if Bitfinex has been advised of the possibility of such damages.",
    "betaProgramCheckbox": "Join the Beta Program",
    "betaProgramText": "Stay up-to-date with every new feature and be one of the first to try it as soon as it’s released.",
    "betaModalTitle": "BETA PROGRAM DISCLAIMER"
  },
  "atomicOrdersTableModal": {
    "title": "Atomic Orders",
    "noOrders": "No active atomic orders"
  },
  "badConnectionModal": {
    "title": "Connection issue",
    "text1": "We've noticed several internet connection issues. It's required to {{action}} the app to continue normal operation.",
    "text2": "Please make sure you have stable and good internet connection.",
    "text3": "The HoneyFramework will {{action}} after you press 'Okay'.",
    "text4": "The app will {{action}} automatically in {{countdown}} seconds.",
    "checkbox": "{{action}} automatically",
    "reboot": "reboot",
    "restart": "Restart"
  },
  "balancesTableModal": {
    "title": "Balances",
    "hideZeroCheckbox": "Hide Zero Balances",
    "noBalances": "No balances available"
  },
  "chartModal": {
    "title": "Chart"
  },
  "layoutSettings": {
    "title": "Layout settings",
    "addComponent": "Add Component",
    "labelEmptyError": "Label empty",
    "addLayout": "Add Layout",
    "layoutName": "Layout Name",
    "invalidComponentError": "Invalid Component"
  },
  "notifications": {
    "title": "Notifications",
    "clearAllBtn": "Clear all",
    "noNotifications": "There are no new notifications yet!",
    "layoutSaved": "Successfully saved layout",
    "wsConnected": "Successfully connected to websocket server",
    "wsDisconnected": "Disconnected from websocket server",
    "internalServerError": "Internal server error",
    "orderCancelledBuyDetailed": "{{exID}} {{type}} BUY order of {{amount}} {{symbol}} has been canceled (ID: {{id}})",
    "orderCancelledSellDetailed": "{{exID}} {{type}} SELL order of {{amount}} {{symbol}} has been canceled (ID: {{id}})",
    "orderExecutedBuyAtDetailed": "{{exID}} {{type}} BUY order of {{amount}} {{symbol}} has been fully executed at {{price}} (ID: {{id}})",
    "orderExecutedBuyDetailed": "{{exID}} {{type}} BUY order of {{amount}} {{symbol}} has been fully executed (ID: {{id}})",
    "orderExecutedSellAtDetailed": "{{exID}} {{type}} SELL order of {{amount}} {{symbol}} has been fully executed at {{price}} (ID: {{id}})",
    "orderExecutedSellDetailed": "{{exID}} {{type}} SELL order of {{amount}} {{symbol}} has been fully executed (ID: {{id}})",
    "orderSubmittedBuyAtDetailed": "Created {{exID}} {{type}} BUY order of {{amount}} {{symbol}} at {{price}} (ID: {{id}})",
    "orderSubmittedBuyDetailed": "Created {{exID}} {{type}} BUY order of {{amount}} {{symbol}} (ID: {{id}})",
    "orderSubmittedSellAtDetailed": "Created {{exID}} {{type}} SELL order of {{amount}} {{symbol}} at {{price}} (ID: {{id}})",
    "orderSubmittedSellDetailed": "Created {{exID}} {{type}} SELL order of {{amount}} {{symbol}} (ID: {{id}})",
    "updatingOrderWithId": "Updating order (ID: {{orderId}})",
    "orderModifiedBuyAtDetailed": "Modified {{exID}} {{type}} BUY order of {{amount}} {{symbol}} at {{price}} (ID: {{id}})",
    "orderModifiedBuyDetailed": "Modified {{exID}} {{type}} BUY order of {{amount}} {{symbol}} (ID: {{id}})",
    "orderModifiedSellAtDetailed": "Modified {{exID}} {{type}} SELL order of {{amount}} {{symbol}} at {{price}} (ID: {{id}})",
    "orderModifiedSellDetailed": "Modified {{exID}} {{type}} SELL order of {{amount}} {{symbol}} (ID: {{id}})",
    "orderPartiallyFilledBuyAtDetailed": "{{exID}} {{type}} BUY order of {{amount}} {{symbol}} partially filled at {{price}} (ID: {{id}})",
    "orderPartiallyFilledBuyDetailed": "{{exID}} {{type}} BUY order of {{amount}} {{symbol}} partially filled (ID: {{id}})",
    "orderPartiallyFilledSellAtDetailed": "{{exID}} {{type}} SELL order of {{amount}} {{symbol}} partially filled at {{price}} (ID: {{id}})",
    "orderPartiallyFilledSellDetailed": "{{exID}} {{type}} SELL order of {{amount}} {{symbol}} partially filled (ID: {{id}})",
    "startedLiveStrategyExecution": "Started live strategy execution ({{label}}) for {{symbol}}-{{timeframe}}",
    "stoppedLiveStrategyExecution": "Stopped live strategy execution ({{label}}) for {{symbol}}-{{timeframe}}",
    "stoppedAO": "Stopped algo order",
    "startedAO": "Started AO {{name}} on {{target}}",
    "unknownAlgoOrderId": "Unknown algo order ID: {{aoID}}",
    "cancellingOrderOn": "Cancelling order on {{target}}",
    "unauthorized": "Unauthorized",
    "authenticated": "Authenticated",
    "algoOrderParameterRemovedSuccessfully": "Algo order parameter has been removed successfully",
    "algoOrderParametersSuccessfullySaved": "Algo order parameters successfully saved",
    "algoOrdersCurrentlyOnlyEnabledFor": "Algo orders currently only enabled for {{target}}",
    "failedToStartAlgoOrder": "Failed to start algo order: {{algoID}}",
    "noClientOpenFor": "No client open for {{target}}",
    "errorRemovingOrder": "Error removing order: {{algoID}} [{{gid}}]",
    "alreadyAuthenticated": "Already authenticated",
    "credentialsAlreadyConfiguredResetThemBeforeReInitializing": "Credentials already configured; reset them before re-initializing",
    "clearedUserCredentialsAndData": "Cleared user credentials & data",
    "invalidPassword": "Invalid password",
    "unrecognisedExchange": "Unrecognised exchange, cannot submit order",
    "submittingOrderTo": "Submitting order to {{target}}",
    "strategyRemovedSuccessfully": "The strategy has been removed successfully",
    "encryptedApiCredentialsSavedFor": "Encrypted API credentials saved for {{exID}}",
    "reconnectingWithNewCredentials": "Reconnecting with new credentials...",
    "requestedAlgoOrderNotRunningCannotStop": "Requested algo order not running, cannot stop",
    "favouriteTradingPairsSuccessfullySaved": "Favourite trading pairs successfully saved",
    "settingsSuccessfullyUpdated": "Settings successfully updated",
    "reconnectingWithNewDmsSetting": "Reconnecting with new DMS setting...",
    "connectingTo": "Connecting to {{target}}...",
    "connectedTo": "Connected to {{target}}",
    "authenticatedWith": "Authenticated with {{target}}",
    "disconnectedFrom": "Disconnected from {{target}}",
    "decryptedCredentialsFor": "Decrypted credentials for {{target}} ({{mode}})",
    "reboot_notify": "Noticed several internet connection issues. Rebooting app...",
    "strategyLaunchMissingAPIKey": "Please configure API keys first and relaunch strategy"
  },
  "tradingModeModal": {
    "title": "Switch Trade Mode",
    "text": "The app will reboot after you press Okay. It's required for switching trading mode. Open algo orders are paused."
  },
  "confirmDMSModal": {
    "title": "Enable Dead Man Switch",
    "text": "Please be aware that when this setting is enabled, closing the app will not only cancel all orders that have been created by the HoneyFramework, but will also cancel all other orders, including those that have been opened on the Bitfinex website or elsewhere.\n\nThis is a recommended setting, but you should be aware of the possible consequences.",
    "dontShowAgain": "Don't show again"
  },
  "editOrderModal": {
    "title": "Edit order",
    "noOrder": "No order selected"
  },
  "oldFormatModal": {
    "title": "Layout upgrade",
    "text1": "Since the v3.12.0 update we have reworked the way of how the application layout works.",
    "text2": "From now on, each component, including the Order form and Ticker symbols, is independent and can be added or removed in the layout settings.",
    "text3": "If needed, you can add these components to your custom layout in the layout settings, sorry for the inconvenience."
  },
  "orderBookModal": {
    "title": "Order Book",
    "sumAmountsCheckbox": "Sum Amounts",
    "stackedViewCheckbox": "Stacked View"
  },
  "orderForm": {
    "title": "Execute Order",
    "title2": "Order Form",
    "apiKeyRequired": "API Key Required",
    "apiSecretRequired": "API Secret Required",
    "submitKeys": "Submit {{mode}} api keys",
    "exchangeConnecting": "Connecting to exchange...",
    "help": "HELP:",
    "bid": "BID",
    "ask": "ASK",
    "exchange": "Exchange",
    "margin": "Margin",
    "derivatives": "Derivatives",
    "fokTitle": "Fill or Kill",
    "hidden": "Hidden",
    "visibleOnHit": "Visible on hit",
    "visibleOnHitHelp": "The rest part of the hidden order will be visible after first hit (partial execution).",
    "fokHelp": "An FOK order is a limit order that must fully fill immediately or it is canceled (killed).",
    "iocTitle": "Immediate or Cancel",
    "iocHelp": "An IOC order is a limit order that must fill immediately, with any unfilled portion cancelled.",
    "limitTitle": "Limit",
    "limitHelp": "A Limit order submits a buy or sell order at the specified price. If the price is above or below the current best ask/bid (respectively for buy/sell orders) it will execute immediately as a TAKER order. Otherwise, it will be inserted into the order book and execute as a MAKER order when the market reaches the order's price.\n\nIf the 'hidden' option is enabled, the order will be inserted in the order book but will not be visible to other users, and will execute as a TAKER.\n\nThe OCO (one-cancels-the-other) option may be used to submit a pair of orders; once one of the orders fills, the other is automatically cancelled.\n\nThe 'post-only' option ensures the order is inserted into the order book instead of being immediately filled, and cancels it otherwise.\n\nA Time-In-Force date may be specified, after which the order will be automatically cancelled.",
    "marketTitle": "Market",
    "marketHelp": "A Market order will fill immediately at the current market price.\n\nIf the 'reduce-only' option is specified, the order will be cancelled if it would open or increase the size of an open position.",
    "stopLimitTitle": "Stop Limit",
    "stopLimitHelp": "The Stop-Limit order type differs from the basic Stop order by allowing the specification of an exact price of execution.\n\nOnce the 'stop' price is reached, a 'Limit' order is created at the specified limit price.\n\nIf the 'hidden' option is enabled, the order will be inserted in the order book but will not be visible to other users, and will execute as a TAKER.\n\nIf the 'reduce-only' option is specified, the resulting Limit order will be cancelled if it would open or increase the size of an open position.\n\nA Time-In-Force date may be specified, after which the order will be automatically cancelled.",
    "stopTitle": "Stop",
    "stopHelp": "Stop orders are automatically converted to Market orders once the specified stop price is reached.\n\nFor control over the execution price, use a Stop-Limit order.\n\nIf the 'reduce-only' option is specified, the order will be cancelled if it would open or increase the size of an open position.\n\nA Time-In-Force date may be specified, after which the order will be automatically cancelled.",
    "trailingStopTitle": "Trailing Stop",
    "trailingStopHelp": "Trailing stop orders follow ('trail') the market price up (for sell orders) or down (for buy orders) by the specified trailing distance. If the market price moves against the trailing stop order, it does not move and will execute once the market reaches the order.\n\nIf the 'reduce-only' option is specified, the order will be cancelled if it would open or increase the size of an open position.\n\nA Time-In-Force date may be specified, after which the order will be automatically cancelled.",
    "reduceOnlyCheckbox": "REDUCE-ONLY",
    "reduceOnlyMessage": "Cancels the order if it would increase the size of an open position",
    "hiddenCheckbox": "HIDDEN",
    "hiddenMessage": "This option allows you to place an order into the book but not have it displayed to other traders. Price/time priority is the same as a displayed order, but the hidden order will always pay the \"taker\" fee while those trading against a hidden order will pay the \"maker\" fee",
    "ocoCheckbox": "OCO",
    "ocoMessage": "This option allows you to place a pair of orders stipulating that if one order is executed fully or partially, then the other order is automatically canceled. A one-cancels-the-other order combines a stop order with a limit order. This option allows you to place both take profit and stop loss targets for your position (only for limit orders)",
    "ocoStop": "OCO Stop",
    "tifCheckbox": "TIF",
    "tifMessage": "Time-In-Force: specify datetime for automatic order cancellation",
    "tifDate": "TIF Date",
    "postOnlyCheckbox": "POST-ONLY",
    "postOnlyMessage": "\"Post Only\" limit orders are orders that allow you to be sure to always pay the maker fee. When placed, a \"Post Only\" limit order is either inserted into the order book or cancelled (only for limit orders)",
    "laverage": "Leverage",
    "stopPrice": "Stop Price",
    "limitPrice": "Limit Price",
    "distance": "Distance",
    "greaterThan0Message": "Must be greater than 0",
    "invalidDateMessage": "Invalid date",
    "dateRequiredMessage": "Date required",
    "mustBeNumberMessage": "Must be a number"
  },
  "orderHistoryModal": {
    "title": "Order History",
    "noHistory": "Order history is empty"
  },
  "joyride": {
    "trading1": "Customized layouts can be saved here",
    "trading2": "You can find your notifications here",
    "trading3": "If you want to create an order, this menu contains all orders available",
    "trading4": "Here you can find the current version of your app. In case there is an update, there will be an update button",
    "market": "To customize your layout, you can add components to it",
    "strategyEditor1": "Create your own strategies",
    "strategyEditor2": "Or open an existing one",
    "strategyEditor3": "In this section you find the available function declarations to code your own strategies"
  },
  "positionsTableModal": {
    "title": "Positions",
    "noPositions": "No active positions found"
  },
  "table": {
    "name": "Name",
    "context": "Context",
    "created": "Created",
    "startedOn": "Started on",
    "stoppedOn": "Stopped on",
    "symbol": "Symbol",
    "label": "Label",
    "currency": "Currency",
    "total": "Total",
    "available": "Available",
    "pair": "Pair",
    "amount": "Amount",
    "basePrice": "Base Price",
    "liqPrice": "Liq Price",
    "pl": "P/L",
    "plPerc": "P/L %",
    "fundingCost": "Funding Cost",
    "type": "Type",
    "price": "Price",
    "status": "Status",
    "time": "Time",
    "fee": "Fee",
    "id": "Id",
    "signal": "Signal",
    "entryAt": "Entry At",
    "leftAt": "Left At",
    "entryPrice": "Entry Price",
    "closingPrice": "Closing Price",
    "units": "Units",
    "profit": "Profit",
    "position": "Position",
    "drawdown": "Drawdown",
    "runningSince": "Running since",
    "leverage": "Leverage",
    "sharpeRatio": "Sharpe Ratio",
    "action": "Action",
    "timestamp": "Timestamp",
    "executedAt": "Executed At",
    "orderPrice": "Order Price",
    "tradePrice": "Trade Price",
    "viewTrades": "View Trades"
  },
  "tickersPanel": {
    "title": "Ticker Panel"
  },
  "time": {
    "1m": "1 Minute",
    "5m": "5 Minutes",
    "15m": "15 Minutes",
    "30m": "30 Minutes",
    "1h": "1 Hour",
    "3h": "3 Hours",
    "6h": "6 Hours",
    "12h": "12 Hours",
    "1D": "1 Day",
    "7D": "7 Days",
    "14D": "14 Days",
    "1M": "1 Month"
  },
  "tradesTableModal": {
    "title": "Trades",
    "noTrades": "There were no trades in this timeframe"
  },
  "tradingStatePanel": {
    "title": "Trading State Panel",
    "filterBy": "Filter by",
    "filteringBy": "Filtering by",
    "positionsTab": "Positions",
    "atomicsTab": "Atomics",
    "algosTab": "Algos",
    "balancesTab": "Balances"
  },
  "statusbar": {
    "liveModeDisclaimer": "You are in LIVE mode. All orders placed in this mode are executed in the real market using real funds",
    "updateToLast": "Update to latest version",
    "connected": "Connected",
    "connecting": "Connecting",
    "disconnected": "Disconnected"
  },
  "strategyEditor": {
    "unsavedChanges": "You have unsaved changes",
    "unsavedChangesModalTitle": "Do you need to save changes in the strategy before closing?",
    "cancelThisProcess": "Cancel this process",
    "cancelAppProcessTitle": "Cancel application process",
    "cancelAppProcessSubmit": "Cancel process",
    "cancelAppProcessDescription": "If you feel this process is taking too long you can cancel it by clicking in the next button.\n\nTake into consideration that this might have unintended consequences in case you are operating in the LIVE environment.",
    "unsavedChangesModalText": "You have unsaved changes in \"{{strategyName}}\". If you don`t save them, they will be permanently deleted",
    "saved": "Saved",
    "errorsInIDE": "Resolve code errors and save",
    "newStrategy": "Create a new strategy",
    "capitalAllocationHelp": "This is the maximum amount of capital you want to deploy to this strategy, in quote currency (or equivalent)\nNOTE: you must have enough funds in the corresponding wallet to launch the strategy",
    "stopLossHelp": "This is the maximum amount of capital you are willing to lose, as a percentage of the capital allocation\nIMPORTANT: the strategy will automatically stop if this level is reached",
    "maximumDrawdownHelp": "This is the maximum drawdown allowed for this strategy in percentage\nIMPORTANT: the strategy will automatically stop if this level is reached",
    "newStrategyFrom": "Create a new strategy from...",
    "newStrategy2": "New strategy",
    "newStrategyFrom2": "New strategy from...",
    "useSandboxTooltip": "Click the toggle to move to the SANDBOX environment where you can create, edit and backtest strategies and much more",
    "nothingToDisplay": "Nothing to display",
    "running": "Running",
    "paused": "Paused",
    "stopped": "Stopped",
    "recent": "Recent",
    "strategyTab": "Strategy",
    "backtestTab": "Backtest",
    "viewInIDETab": "View in IDE",
    "activeStrategies": "Active strategies",
    "pastStrategies": "Executed strategies",
    "savedStrategies": "Draft strategies",
    "copyStrategy": "Copy draft strategy",
    "renameStrategy": "Rename draft strategy",
    "deleteStrategy": "Delete draft strategy",
    "more": "More",
    "importStrategy": "Import strategy from JSON...",
    "orSelectOne": "or select one from the list below",
    "selectStrategy": "Please select a strategy from the list below or head to the SANDBOX mode to begin drafting a new one",
    "newStrategyModalTitle": "Create a New Strategy",
    "saveStrategyAsModalTitle": "Save strategy as...",
    "newStrategyFromModalTitle": "Create a New Strategy from...",
    "newStrategyModalEmptyError": "Label is empty",
    "newStrategyModalLongError": "Strategy name is too long ({{labelSize}}/{{MAX_LABEL_LENGTH}} characters)",
    "openStrategyModalTitle": "Open Strategy",
    "launchStrategy": "Launch Strategy",
    "stopExec": "Stop Execution",
    "openStartegyModalNoSelectedError": "No strategy selected",
    "backtestingCreateMessage": "Create a strategy to begin backtesting",
    "backtestingLoadingMessage": "Loading candles and executing strategy...",
    "backtestingStartingMessage": "Press start to begin backtesting",
    "exportCSV": "Export as CSV",
    "exportStrategy": "Export strategy to JSON",
    "historical": "Historical",
    "startDate": "Start Date",
    "endDate": "End Date",
    "useCandlesCheckbox": "Use candles",
    "useCandlesCheckboxDescription": "Much Faster, Less Accurate",
    "useTradesCheckbox": "Use trades",
    "useTradesCheckboxDescription": "Match against real trade history. Much slower, More Accurate",
    "useMarginCheckbox": "Use margin trading",
    "useMarginCheckboxDescription": "PLUG",
    "checkboxWarningMessage": "At least one checkbox should be selected",
    "invalidTF": "Invalid timeframe selected",
    "invalidPeriod": "End date has to be after the start date",
    "totalPL": "Total P/L",
    "avgPL": "Avg PL",
    "profitFactor": "Profit Factor",
    "volatility": "Volatility",
    "backtestCandles": "Backtest Candles",
    "backtestTrades": "Backtest Trades",
    "allocation": "Capital Allocation",
    "positionSize": "Position Size",
    "currentAllocation": "Current Capital Allocation",
    "availableFunds": "Available Funds",
    "equityCurve": "Equity Curve",
    "ret": "Returns",
    "retPerc": "Returns %",
    "drawdown": "Drawdown %",
    "trades": "Trades",
    "positions": "Positions",
    "gains": "Gains",
    "losses": "Losses",
    "fees": "Fees",
    "profitLoss": "Profit/Loss",
    "volume": "Volume",
    "largestGain": "Largest Gain",
    "largestLoss": "Largest Loss",
    "liveExecution": {
      "initialMessage": "Press start to begin execution",
      "executing": "Your strategy is being executed on your live account with real balances.",
      "stopping": "Stopping strategy execution...",
      "preparing": "Processing and preparing the strategy before execution...",
      "realBalancesWarning": "NOTE: By pressing start, you will be executing your strategy on your live account with real balances.",
      "createStrategy": "Create a strategy to begin executing."
    },
    "candleSeedCount": "Candle seed count",
    "noStrategiesToDisplay": "There are no strategies to display",
    "saveWithDifferentName": "Save with different name",
    "templatesTab": "Templates",
    "savedStrategiesTab": "From saved",
    "selectMarketDescription": "Select market",
    "selectMarketDescriptionDisabled": "Selected Market",
    "selectCandleDurationDescription": "Select candle duration",
    "fullscreenChartBtn": "Fullscreen Chart",
    "exitFullscreenChartBtn": "Exit fullscreen",
    "strategyTypeDescription": "Select strategy type",
    "strategyTypeDescriptionDisabled": "Selected strategy type",
    "customStrategyTypeInputPlaceholder": "Enter your own type...",
    "strategyTypes": {
      "momentum": "Momentum",
      "meanReverting": "Mean-Reverting",
      "trendFollowing": "Trend Following",
      "technicalAnalysis": "Technical Analysis",
      "other": "Other..."
    },
    "closeStrategy": "Close strategy",
    "executionOptionsModal": {
      "title": "Select execution parameters before launch",
      "disabledTitle": "Execution parameters",
      "capitalAllocationLabel": "Capital Allocation",
      "stopLoss": "Stop-Loss",
      "maxDrawdown": "Maximum Drawdown"
    },
    "perfomanceMetrics": {
      "title": "Perfomance metrics",
      "runTime": "Strategy Run Time"
    },
    "IDEreadonlyNotice": "Strategy editing is disabled while the strategy is being executed. To update your strategy, change to SANDBOX environment and reopen this strategy from your ACTIVE STRATEGIES tab"
  },
  "ui": {
    "ok": "Okay",
    "cancel": "Cancel",
    "dontShowAgain": "I understood. Don't show me again!",
    "dropdown": "Select an option",
    "backBtn": "Back",
    "export": "Export",
    "import": "Import",
    "closeBtn": "Close",
    "closeWithoutSaving": "Close without saving",
    "lastBtn": "Finish",
    "nextBtn": "Next",
    "openDlgBtn": "Open the dialog",
    "skipBtn": "Skip",
    "submitBtn": "Submit",
    "updateBtn": "Update",
    "sellBtn": "Sell",
    "buyBtn": "Buy",
    "save": "Save",
    "saveAs": "Save As...",
    "openBtn": "Open",
    "removeBtn": "Remove",
    "createBtn": "Create",
    "startBtn": "Start",
    "stopBtn": "Stop",
    "deleteBtn": "Delete",
    "expandPanel": "Expand Panel",
    "compressPanel": "Compress Panel",
    "name": "Name",
    "notSelected": "Not selected",
    "e.g.": "e.g. {{value}}"
  },
  "crashHandler": {
    "text1": "An error occurred that caused the HoneyFramework UI to halt. Please, restart the application to proceed working with it",
    "text2_1": "Please, report this issue at",
    "text2_2": "so we would be able to fix it as soon as possible!",
    "text3": "Technical crash info"
  },
  "orderContexts": {
    "exchange": "Exchange",
    "margin": "Margin",
    "funding": "Derivative"
  },
  "balanceContexts": {
    "exchange": "Exchange",
    "margin": "Margin",
    "funding": "Derivative",
    "contribution": "Capital Raise"
  },
  "orderStatuses": {
    "ACTIVE": "ACTIVE"
  },
  "chart": {
    "trading": {
      "order": {
        "context": {
          "exchange": "Exchange",
          "margin": "Margin",
          "derivative": "Derivative"
        },
        "tooltip": {
          "type": "Type: {{type}}",
          "context": "Context: {{context}}",
          "amount": "Amount: {{amount}} {{ccy}}",
          "price": "Price: {{price}} {{ccy}}",
          "distance": "Distance: {{distance}} {{ccy}}",
          "stopPrice": "Stop price: {{stopPrice}} {{ccy}}",
          "limitPrice": "Limit price: {{limitPrice}} {{ccy}}",
          "leverage": "Leverage: {{leverage}}",
          "collateral": "Collateral: {{collateral}} {{ccy}}",
          "placed": "Placed: {{placedDate}}"
        },
        "modifyTooltip": "Modify order",
        "cancelTooltip": "Cancel order"
      },
      "position": {
        "label": "P/L: %{pl} ({{plPercent}}%)",
        "tooltip": {
          "amount": "Amount: {{amount}} {{ccy}}",
          "basePrice": "Base price: {{basePrice}} {{ccy}}",
          "liqPrice": "Liq. price: {{liquidationPrice}} {{ccy}}",
          "pl": "P/L: {{pl}} {{ccy}}",
          "plPercent": "P/L% {{plPercent}}%"
        }
      },
      "liquidation": {
        "label": "Liquidation"
      }
    }
  },
  "removeExistingStrategyModal": {
    "title": "Remove Strategy",
    "text_1": "Are you sure you want to delete",
    "text_2": "strategy?",
    "warning_1": "WARNING",
    "warning_2": "This action can not be undone!",
    "strategyName": "the strategy name",
    "input_placeholder": "Type {{label}} to delete it"
  }
}
